{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://concert.ibm.com/schema/concertdef-1.0.2.schema.json",
  "type": "object",
  "title": "Concert v1.0.2 Schema for Build SBOMs",
  "required": [
    "bomFormat",
    "specVersion",
    "metadata"
  ],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string",
      "enum": [
        "http://concert.ibm.com/schema/concertdef-1.0.2.json"
      ]
    },
    "bomFormat": {
      "type": "string",
      "title": "BOM Format",
      "description": "Format of the BOM.",
      "enum": [
        "ConcertDef"
      ]
    },
    "specVersion": {
      "type": "string",
      "title": "Concert Schema Specification Version",
      "description": "Version of the ConcertDef specification.",
      "examples": [
        "1.0.2"
      ]
    },
    "serialNumber": {
      "type": "string",
      "title": "BOM Serial Number",
      "description": "The unique URN of the BOM file. Prefix of the URN (e.g., 'urn:ibm:<clientName>:<appName>') must be registered with Concert.",
      "examples": [
        "urn:ibm:myorg:myapp"
      ]
    },
    "version": {
      "type": "integer",
      "title": "BOM Version",
      "description": "Version of the BOM file.",
      "minimum": 1,
      "default": 1,
      "examples": [
        1
      ]
    },
    "metadata": {
      "$ref": "#/definitions/metadata",
      "title": "BOM Metadata",
      "uniqueItems": true,
      "description": "Provides additional information about a BOM."
    },
    "components": {
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/object-library"
          },
          {
            "$ref": "#/definitions/object-container"
          },
          {
            "$ref": "#/definitions/object-code"
          }
        ]
      },
      "uniqueItems": true,
      "title": "Components",
      "description": "A list of top-level software components."
    },
    "properties": {
      "type": "array",
      "title": "Properties",
      "items": {
        "$ref": "#/definitions/property"
      }
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "title": "Tags",
      "description": "An optional list of strings that can be used for searching or filtering.",
      "examples": [
        "team-tiger"
      ]
    }
  },
  "definitions": {
    "refType": {
      "description": "An identifier which can be used to reference the component elsewhere in the BOM. Every bom-ref MUST be unique within the BOM.",
      "type": "string",
      "minLength": 1
    },
    "refLinkType": {
      "description": "Descriptor for an element identified by the attribute 'bom-ref' in the same BOM document.\nIn contrast to `bomLinkElementType`.",
      "allOf": [
        {
          "$ref": "#/definitions/refType"
        }
      ]
    },
    "bomLinkDocumentType": {
      "title": "CycloneDX BOM-Link Document",
      "description": "Descriptor for another BOM document. See https://cyclonedx.org/capabilities/bomlink/",
      "type": "string",
      "format": "iri-reference",
      "$comment": "part of the pattern is based on `bom.serialNumber`'s pattern",
      "examples": [
        "urn:uuid:97cdf861-f4e8-4bb1-893b-9e5907ebb399/1"
      ]
    },
    "bomLinkElementType": {
      "title": "CycloneDX BOM-Link Element",
      "description": "Descriptor for an element in a BOM document. See https://cyclonedx.org/capabilities/bomlink/",
      "type": "string",
      "format": "iri-reference",
      "$comment": "part of the pattern is based on `bom.serialNumber`'s pattern"
    },
    "bomLink": {
      "anyOf": [
        {
          "$ref": "#/definitions/bomLinkDocumentType"
        },
        {
          "$ref": "#/definitions/bomLinkElementType"
        }
      ]
    },
    "metadata": {
      "type": "object",
      "title": "BOM Metadata Object",
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp",
          "description": "ISO 8601 date and time when the BOM was created.",
          "examples": [
            "2024-01-01T12:00:00Z"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "build"
          ],
          "title": "Metadata Type",
          "description": "Specifies the ConcertDef type of the software component.  The types are:\n\n* __application__ = A software application definition without environment-dependent deployment specifics for its constituent containers, code repositories, services, and/or API endpoints.\n* __build__ = A component comprising versioned container image artifact and the associated versioned code repository.\n* __deploy__ = A component comprsing deployment components, runtime-components, and relevant services and API endpoint URLs for deploying environment-specific application microservices.",
          "examples": [
            "build"
          ]
        },
        "component": {
          "type": "object",
          "title": "Metadata Component",
          "description": "ConcertDef component labels used for searching or selecting in Concert.",
          "required": [
            "name",
            "version"
          ],
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name of the ConcertDef component",
              "examples": [
                "my-component-1"
              ]
            },
            "version": {
              "type": "string",
              "title": "Version",
              "description": "Versioon string of the ConcertDef component.",
              "examples": [
                "2.100.0"
              ]
            },
            "build-number": {
              "type": "string",
              "title": "Build Number",
              "description": "Build string of the ConcertDef Build component.",
              "examples": [
                "124"
              ]
            }
          }
        },
        "properties": {
          "type": "array",
          "title": "Properties",
          "items": {
            "$ref": "#/definitions/property"
          }
        }
      }
    },
    "object-library": {
      "type": "object",
      "title": "Library Object",
      "required": [
        "type",
        "name",
        "version",
        "purl"
      ],
      "additionalProperties": false,
      "properties": {
        "bom-ref": {
          "$ref": "#/definitions/refType"
        },
        "type": {
          "type": "string",
          "enum": [
            "library"
          ]
        },
        "name": {
          "type": "string",
          "title": "Library Name",
          "description": "Library name per CycloneDX specification.",
          "examples": [
            "maven/com.app.example"
          ]
        },
        "version": {
          "type": "string",
          "title": "Version",
          "description": "Version string for the component.",
          "examples": [
            "0.0.1"
          ]
        },
        "purl": {
          "type": "string",
          "title": "Library PURL",
          "description": "Library PURL per CycloneDX specification.",
          "examples": [
            "pkg:maven/com.app.example/example@0.0.1-SNAPSHOT?type=jar"
          ]
        },
        "cyclonedx-bom-link": {
          "$ref": "#/definitions/bomLinkDocumentType"
        }
      }
    },
    "object-container": {
      "title": "Container Object",
      "description": "Container object with build inventory data.  Container image URI needs be available via the \"uri\" property or by composing the values of other properties, e.g., <\"name\", \"tag\", \"digest\"> or <\"purl\", \"digest\">.",
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "bom-ref": {
          "$ref": "#/definitions/refType"
        },
        "type": {
          "type": "string",
          "enum": [
            "container"
          ]
        },
        "name": {
          "type": "string",
          "title": "Container Name",
          "description": "Container image registry path.",
          "examples": [
            "us.icr.io/myapp/my-component-1",
            "us.icr.io/icr4mcc/concert-sample-devsecops"
          ]
        },
        "uri": {
          "type": "string",
          "title": "Container Image URI",
          "description": "Structured URI containing image registry path, image tag, and image digest.  It is recommended to use that as a UID for the container image.",
          "examples": [
            "us.icr.io/myapp/my-component-1:2.100.0.40@sha256:de11d4d8d711a65b2782c7ee8e2c7ffe718122821b7d35fba434d26f5c404939",
            "us.icr.io/icr4mcc/concert-sample-devsecops:124-main-03964735fadfd0fae86a1edb5f82257a133f79c7@sha256:c596470fbda33ec78ba6645b95fb2e0a7f324f929f3feff56125de38a3163f71"
          ]
        },
        "purl": {
          "type": "string",
          "title": "Container Image PURL",
          "description": "Container image registry path and tag",
          "examples": [
            "us.icr.io/myapp/my-component-1:2.100.0.40",
            "us.icr.io/icr4mcc/concert-sample-devsecops:124-main-03964735fadfd0fae86a1edb5f82257a133f79c7"
          ]
        },
        "tag": {
          "type": "string",
          "title": "Image Tag",
          "description": "Image tag.  It can be a timestamp of a source code.",
          "examples": [
            "2.100.0.40",
            "124-main-03964735fadfd0fae86a1edb5f82257a133f79c7"
          ]
        },
        "digest": {
          "type": "string",
          "title": "Image Digest",
          "description": "Image digest",
          "examples": [
            "sha256:de11d4d8d711a65b2782c7ee8e2c7ffe718122821b7d35fba434d26f5c404939",
            "sha256:c596470fbda33ec78ba6645b95fb2e0a7f324f929f3feff56125de38a3163f71"
          ]
        },
        "cyclonedx-bom-link": {
          "$ref": "#/definitions/bomLinkDocumentType"
        }
      }
    },
    "object-code": {
      "type": "object",
      "required": [
        "type",
        "name",
        "purl"
      ],
      "additionalProperties": false,
      "properties": {
        "bom-ref": {
          "$ref": "#/definitions/refType"
        },
        "type": {
          "type": "string",
          "enum": [
            "code"
          ]
        },
        "name": {
          "type": "string",
          "title": "Code Name",
          "description": "Name of the source/deployment Code object.",
          "examples": [
            "com.app.example",
            "concert-sample-devsecops"
          ]
        },
        "purl": {
          "type": "string",
          "title": "Code Repo URL",
          "description": "URL (or folder path) of the source/deployment repo (or file system).",
          "examples": [
            "https://github.ibm.com/myapp/my-component-1",
            "https://github.ibm.com/concert/concert-sample-devsecops"
          ]
        },
        "commit_sha": {
          "type": "string",
          "title": "Commit Sha",
          "description": "Commit sha of a git repo.",
          "examples": [
            "03964735fadfd0fae86a1edb5f82257a133f79c7"
          ]
        },
        "branch": {
          "type": "string",
          "title": "Branch ",
          "description": "Branch of a git repo.",
          "examples": [
            "main"
          ]
        },
        "cyclonedx-bom-link": {
          "$ref": "#/definitions/bomLinkDocumentType"
        }
      }
    },
    "property": {
      "type": "object",
      "title": "Lightweight name-value pair",
      "description": "Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values.",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "title": "Name",
          "description": "The name of the property. Duplicate names are allowed, each potentially having a different value."
        },
        "value": {
          "type": "string",
          "title": "Value",
          "description": "The value of the property."
        }
      }
    }
  }
}